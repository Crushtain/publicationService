package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/Crushtain/publicationService.git/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, username string, title string, text string) (*model.Post, error) {
	post := &model.Post{
		ID:       uuid.NewString(),
		Username: username,
		Title:    title,
		Text:     text,
	}
	err := r.Storage.CreatePost(post)
	if err != nil {
		return nil, err
	}
	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, username string, text string, postID string, parentID string) (*model.Comment, error) {
	comment := &model.Comment{
		ID:       uuid.NewString(),
		Username: username,
		Text:     text,
		ParentID: parentID,
		PostID:   postID,
	}
	err := r.Storage.CreateComment(comment)
	if err != nil {
		return nil, err
	}
	return comment, nil
}

// Post is the resolver for the Post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post, err := r.Storage.GetPost(id)
	if err != nil {
		return &model.Post{}, err
	}
	return post, nil
}

// CommentsByPostID is the resolver for the CommentsByPostID field.
func (r *queryResolver) CommentsByPostID(ctx context.Context, postID string) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentsByPostID - CommentsByPostID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
